vuex 概念

1.vuex是什么？
-- vuex是一个专为vue.js应用程序开发的状态管理模式。
   它采用集中式存储管理应用的所有组件的状态，并相应的规则保证状态以一种可预测的方式发生变化。
   vuex也集成Vue的官方调试工具 devtools extension， 提供了储如零配置的time-travel调试、
   状态快照导入导出等高级调试功能。

2.状态管理分为几个部分？
-- 状态管理分为以下三个部分：
	・ state: 驱动应用的数据源
	・ view： 以声明方式将state映射到视图
	・ actions: 响应在view上的用户输入导致的状态变化
	
3.vuex的本质思想是什么？
-- 要知道本质的思想先看下面两个问题
	・ 多个试图依赖同一状态
	・ 来自不同视图的行为需要变更同一状态
   如何解状上面两个问题？
	-- 对于问题一： 传参的方法对于多层嵌套的组件装会非常繁琐，并且对于兄弟组件间的状态传递无能为力。
	-- 对于问题二： 我们经常会采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。
	以上的这些模式非常脆弱，通常会导致无法维护的代码。
	因此，vuex的本质思想就是解决上面两个问题的关键，vuex把组件的共享状态抽取出来，以一个全局的单例模式管理，
	在这种模式下，我们的组件树构成了一个巨大的视图，不管在树的哪个位置，任何组件都能获取到状态或者触发行为。
	另外，通过定义和隔离状态管理中的各种概念并强制遵守一定的规则，所写的代码将会变得更结构化且易维护。
	
4.什么情况下应该使用Vuex？
-- 如果开发的不是大型单页面应用，可以使用使vuex，这是为了避免项目更加复杂化且繁琐冗余。
   如果开发的项目够简单，也不需要使用Vuex，可以使用 global event bus就足够了。
   相反，如果开发的项目是大型的单页面应用，你可以考虑使用vuex来管理组件的外部状态。
   
   
   
 Store 仓库=================================================
 1.store是什么？
--  每个Vuex应用的核心就是store，store基本是就是一个容器，它包含着你应用中大部分的状态，它下单纯的全局对象有以下两点不同？
	・ vuex的状态存储是响应式的，当vue组件从store中读取状态的时候，若store中的状态发生变化，那么相应的组件也会相应的得到更新。
	・ 你不能直接改变store中的状态，改变store中的状态的唯一途径是显式的提交(commit) mutations.
	  这样使得我们可以方便的跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好的了解我们的应用。
	  
-- store中的状态是响应式的，在组件中调用store中的状态简单到仅需要在计算属性中返回即可。触发变化也仅仅是在组件中的methods中提交mutations。